#!/busybox/bin/sh
# The rdinit for android and generic rootfs boot on all devices
# It search rootfs on devices as following sequence,
#	1. INIT_MTDBLK
#	2. Default network
#	3. USB network
#	4. SD Card (TODO)
# If multi rootfs are available, it will load one as following sequence,
#	1. Android
#	2. generic rootfs
#
# Draft by Bin Yang <bin.yang@marvell.com> on 20 Sept. 2009
#

PATH=/busybox/bin:/busybox/sbin:/busybox/usr/bin:/busybox/usr/sbin
export PATH

ROOTFS=/rootfs
INIT_MTDBLK=/dev/mtdblock0
IS_MTD=1
#export the variable for the usage of power off charge case
export IS_MTD
INIT_MMCBLK=/dev/mmcblk
INIT_SIZE=256k
INIT_IMG=/tmp/ramdisk.img

#the rootfs arg from kernel command line. e.g. android@nfs, generic@flash 
CMDLINE_CMD=set_rootfs
PANIC_CMD=panic_debug
ROOTFS_ARG= 
ROOTFS_TYPE="android generic"
ROOTFS_DEV="flash mmc0 mmc1 nfs"

HOST_IP="192.168.1.100"
TARGET_IP="192.168.1.101"
MOUNT_OPTION="-t nfs -o nolock,rsize=1024,wsize=1024"
ANDROID_NFS_PATH=/nfs/android
ROOTFS_NFS_PATH=/nfs/rootfs
USB_ETHER_M1=/g_ether.ko
USB_ETHER_M2=/g_ether_ko
USB_ETHER_M=$USB_ETHER_M2
DCMD_M=/dcmd_ko

MMC_DEV=/dev/mmcblk0p1
PWR_OFF_CHG=0

rdinit_prepare() {
	mknod /dev/console c 5 1
	exec > /dev/console
	exec < /dev/console
	cd /
	mkdir /proc
	mount -t proc proc /proc
	mkdir /sys
	mount -t sysfs sysfs /sys
	mdev -s
	cmdline=`cat /proc/cmdline`
	for arg in $cmdline ; do
		if [ "$PANIC_CMD" = $arg ]; then
			echo "enable panic debug..."
			insmod $DCMD_M
		fi

		cmd=`echo $arg | cut -d'=' -f1`
		if [ "$CMDLINE_CMD" = $cmd ]; then
			ROOTFS_TYPE=`echo $arg | cut -d'=' -f2 | cut -d'@' -f1`
			ROOTFS_DEV=`echo $arg | cut -d'=' -f2 | cut -d'@' -f2`
		fi
		if [ "bootrd" = $cmd ]; then
			INIT_MTDBLK=`echo $arg | cut -d'=' -f2`
			echo "Boot from $INIT_MTDBLK"
		fi
		if [ "bootsz" = $cmd ]; then
			INIT_SIZE=`echo $arg | cut -d'=' -f2`
			echo "load image size $INIT_SIZE"
		fi
		if [ "emmc_boot" = $cmd ]; then
			IS_MTD=0
			echo "ready to emmc boot"
		fi
	done
}

rdinit_cleanup() {
	echo "clean before boot to rootfs..."
	umount /proc
	umount /sys
	mount -o remount,rw rootfs /
	rm -rf /g_ether.ko /proc /sys /tmp /dev 
}

try_boot_from_ramdisk() {
	echo "extract init img from $1..."
	if [ -e $1 ]; then
		dd if=$1 of=$INIT_IMG bs=$INIT_SIZE count=1
		cd $ROOTFS
		gzip -dc $INIT_IMG | cpio -i
		rm -rf $INIT_IMG 
		cd /
		if [ -e "$ROOTFS/init" ] ; then
			echo "find rootfs in init partition, boot from it..."
			if [ $IS_MTD -eq 1 ]; then
				echo "MTD device found, boot from MTD..."
				rm -f $ROOTFS/init.ext4.rc
				rm -f $ROOTFS/init.pxa910-based.ext4.rc
				rm -f $ROOTFS/init_bsp.ext4.rc
				rm -f $ROOTFS/init_bsp.pxa910-based.ext4.rc
			else
				echo "MTD device not found, boot from MMC..."
				mv $ROOTFS/init.ext4.rc $ROOTFS/init.rc
				mv $ROOTFS/init.pxa910-based.ext4.rc $ROOTFS/init.pxa910-based.rc
				mv $ROOTFS/init_bsp.ext4.rc $ROOTFS/init_bsp.rc
				mv $ROOTFS/init_bsp.pxa910-based.ext4.rc $ROOTFS/init_bsp.pxa910-based.rc
			fi
			rdinit_cleanup
			mv $ROOTFS/* / 
			rm -rf $ROOTFS
			exec /init $INIT_PARAM1
			return 0
		fi
	fi
	return 1
}

try_prepare_network() {
	echo "try default network..."
	ifconfig usb0 $TARGET_IP
	sleep 2;
	ping -w 1 -c 1 $HOST_IP
	if [ 0 = $? ]; then
		echo "default network works";
		return 0;
	fi

	echo "try usb network...";
	if [ -e $USB_ETHER_M1 ]; then
		USB_ETHER_M=$USB_ETHER_M1
	fi
	
	if [ -e $USB_ETHER_M ]; then
		insmod $USB_ETHER_M 
		ifconfig usb0 $TARGET_IP
		ping -w 5 -c 1 $HOST_IP
		if [ 0 = $? ]; then
			echo "usb network works";
			return 0;
		fi
		rmmod $USB_ETHER_M
	else
		echo "no usb network driver $USB_ETHER_M, abort";
	fi
	echo "network does not work"
	return 1
}

try_prepare_mmc() {
	echo "try to mount mmc..."
	mount $MMC_DEV $ROOTFS
	if [ 0 = $? ]; then
		echo "MMC is available";
		return 0;
	fi
	echo "MMC does not work"
	return 1
}

try_boot_from_android_nfs() {
	echo "try to boot from android nfs..."; 
	mount $MOUNT_OPTION $HOST_IP:$ANDROID_NFS_PATH $ROOTFS
	if [ -e "$ROOTFS/init" ]; then
		rdinit_cleanup
		exec switch_root $ROOTFS /init
	fi
	
}

try_boot_from_rootfs_nfs() {
	echo "try to boot from rootfs nfs..."; 
	mount $MOUNT_OPTION $HOST_IP:$ROOTFS_NFS_PATH $ROOTFS
	if [ -e "$ROOTFS/sbin/init" ] ; then
		rdinit_cleanup
		exec switch_root $ROOTFS /sbin/init
	fi
}

try_boot_from_mmc() {
	dev="$INIT_MMCBLK""$1"p1
	echo "try to boot from $dev..."; 
	if [ -e $dev ]; then
		mount $dev $ROOTFS
		if [ -e "$ROOTFS/init" ]; then
			rdinit_cleanup
			exec switch_root $ROOTFS /init
		fi
	fi
}

boot_abort() {
	echo "boot abort ..."
	rdinit_cleanup
	rm -rf $ROOTFS
	mv /busybox/* /
	/bin/rm /busybox rdinit -rf
	exec /sbin/init
}

check_power_status() {
	echo " check power supply status..."
	echo -0x3e > /proc/driver/pm860x_charger
	ON_KEY_STATUS=`cat /proc/driver/pm860x_charger`
	REG_3E=`echo $ON_KEY_STATUS | cut -d':' -f2` 
	BAT_PRESENT=`cat /sys/class/power_supply/battery/present`
	USB_ONLINE=`cat /sys/class/power_supply/usb/online`
	AC_ONLINE=`cat /sys/class/power_supply/ac/online`
	if [ $USB_ONLINE -eq 1 -o $AC_ONLINE -eq 1 ]; then
		CHG_ONLINE=1
	else
		CHG_ONLINE=0
	fi
	echo "charger online:$CHG_ONLINE"
	echo "bat online:$BAT_PRESENT"

	if [ $BAT_PRESENT -eq 1 -a $CHG_ONLINE -eq 1 -a $REG_3E != "0x1" ]; then
		echo "power off charging launch..."
		echo "charger online:$CHG_ONLINE"
		echo "bat online:$BAT_PRESENT"
		PWR_OFF_CHG=1
	else
		PWR_OFF_CHG=0
	fi
	# clear the on-key power up flag
	echo -0x3e > /proc/driver/pm860x_charger
	echo 0x0 > /proc/driver/pm860x_charger
}


#########Boot sequence###########
rdinit_prepare
#check power off chg status
check_power_status
if [ $PWR_OFF_CHG -eq 1 ] ; then
	boot_abort
fi

echo "Try $ROOTFS_TYPE rootfs on $ROOTFS_DEV device ... "
for dev in $ROOTFS_DEV ; do
	if [ "$dev" = "flash" ]; then
		try_boot_from_ramdisk $INIT_MTDBLK
		continue
	fi
	if [ "$dev" = "nfs" ]; then
		if try_prepare_network ; then
			for type in $ROOTFS_TYPE ; do
				if [ "$type" = "android" ]; then
					try_boot_from_android_nfs
				fi
				if [ "$type" = "generic" ]; then
					try_boot_from_rootfs_nfs
				fi


			done
		fi
	fi
	if [ "$dev" = "mmc0" ]; then
		try_boot_from_ramdisk "$INIT_MMCBLK"0
		if [ $? = 0 ]; then
			try_boot_from_mmc 0
		fi
		continue
	fi
	if [ "$dev" = "mmc1" ]; then
		try_boot_from_ramdisk "$INIT_MMCBLK"1
		if [ $? = 0 ]; then
			try_boot_from_mmc 1
		fi
		continue
	fi
done
boot_abort

