/*
 * (C) Copyright 2010 Marvell International Ltd.
 * All Rights Reserved
 *
 * MARVELL CONFIDENTIAL
 * Copyright 2008 ~ 2010 Marvell International Ltd All Rights Reserved.
 * The source code contained or described herein and all documents related to
 * the source code ("Material") are owned by Marvell International Ltd or its
 * suppliers or licensors. Title to the Material remains with Marvell International Ltd
 * or its suppliers and licensors. The Material contains trade secrets and
 * proprietary and confidential information of Marvell or its suppliers and
 * licensors. The Material is protected by worldwide copyright and trade secret
 * laws and treaty provisions. No part of the Material may be used, copied,
 * reproduced, modified, published, uploaded, posted, transmitted, distributed,
 * or disclosed in any way without Marvell's prior express written permission.
 *
 * No license under any patent, copyright, trade secret or other intellectual
 * property right is granted to or conferred upon you by disclosure or delivery
 * of the Materials, either expressly, by implication, inducement, estoppel or
 * otherwise. Any license under such intellectual property rights must be
 * express and approved by Marvell in writing.
 *
 */

#include <binder/MemoryBase.h>
#include <binder/MemoryHeapBase.h>
#include <binder/MemoryHeapPmem.h>
#include <linux/android_pmem.h>
#include <utils/Log.h>

#include "cam_log.h"
#include "cam_log_mrvl.h"
#include "CameraSetting.h"
#include "ippIP.h"
#include "CameraCtrl.h"
#include "FakeCam.h"
#include "ippExif.h"
#include "exif_helper.h"

#define LOG_TAG "FakeCam"

namespace android {

    static CameraInfo sCameraInfo[] = {
        {
            CAMERA_FACING_BACK,
            90,
        },
        {
            CAMERA_FACING_FRONT,
            0,
        }
    };

    static CameraParameters Param[2];

    int FakeCam::getNumberOfCameras(){

        CameraParameters DefParam;
        {
            DefParam.set(CameraParameters::KEY_PREVIEW_SIZE,
                    "640x480");
            DefParam.set(CameraParameters::KEY_SUPPORTED_PREVIEW_SIZES,
                    "176x144,320x240,640x480,720x480,800x480,1280x720");
            DefParam.set(CameraParameters::KEY_PREVIEW_FORMAT,
                    "yuv420sp");
            DefParam.set(CameraParameters::KEY_VIDEO_FRAME_FORMAT,
                    "yuv420sp");
            DefParam.set(CameraParameters::KEY_SUPPORTED_PREVIEW_FORMATS,
                    "yuv420sp,yuv420p,yuv422i-uyvy,rgb565");
            DefParam.set(CameraParameters::KEY_PREVIEW_FRAME_RATE,
                    "30");
            DefParam.set(CameraParameters::KEY_SUPPORTED_PREVIEW_FRAME_RATES,
                    "10,20,30");
            DefParam.set(CameraParameters::KEY_PICTURE_SIZE,
                    "2048x1536");
            DefParam.set(CameraParameters::KEY_SUPPORTED_PICTURE_SIZES,
                    "176x144,320x240,640x480,720x480,800x480,1280x720,2048x1536");
            DefParam.set(CameraParameters::KEY_PICTURE_FORMAT,
                    "jpeg");
            DefParam.set(CameraParameters::KEY_SUPPORTED_PICTURE_FORMATS,
                    "jpeg");
            DefParam.set(CameraParameters::KEY_JPEG_QUALITY,
                    "90");
            DefParam.set(CameraParameters::KEY_WHITE_BALANCE,
                    "auto");
            DefParam.set(CameraParameters::KEY_SUPPORTED_WHITE_BALANCE,
                    "auto,incandescent,fluorescent,warm-fluorescent,daylight,cloudy-daylight,twilight,shade");
            DefParam.set(CameraParameters::KEY_EFFECT,
                    "none");
            DefParam.set(CameraParameters::KEY_SUPPORTED_EFFECTS,
                    "none,mono,negative,solarize,sepia,posterize,whiteboard,blackboard,aqua");
            DefParam.set(CameraParameters::KEY_ANTIBANDING,
                    "auto");
            DefParam.set(CameraParameters::KEY_SUPPORTED_ANTIBANDING,
                    "auto,50hz,60hz,off");
            DefParam.set(CameraParameters::KEY_FLASH_MODE,
                    "off");
            DefParam.set(CameraParameters::KEY_SUPPORTED_FLASH_MODES,
                    "off,auto,on,red-eye,torch");
            DefParam.set(CameraParameters::KEY_FOCUS_MODE,
                    "auto");
            DefParam.set(CameraParameters::KEY_SUPPORTED_FOCUS_MODES,
                    "auto,infinity,macro,fixed,edof,continuous-video");
            DefParam.set(CameraParameters::KEY_FOCAL_LENGTH,
                    "0.1");
            DefParam.set(CameraParameters::KEY_HORIZONTAL_VIEW_ANGLE,
                    "50");
            DefParam.set(CameraParameters::KEY_FOCUS_DISTANCES,
                    "0.05,2,Infinity");
            DefParam.set(CameraParameters::KEY_VERTICAL_VIEW_ANGLE,
                    "50");
            DefParam.set(CameraParameters::KEY_JPEG_THUMBNAIL_WIDTH,
                    "160");
            DefParam.set(CameraParameters::KEY_JPEG_THUMBNAIL_HEIGHT,
                    "120");
            DefParam.set(CameraParameters::KEY_SUPPORTED_JPEG_THUMBNAIL_SIZES,
                    "160x120,0x0");
            DefParam.set(CameraParameters::KEY_JPEG_THUMBNAIL_QUALITY,
                    "80");
            DefParam.set(CameraParameters::KEY_PREVIEW_FPS_RANGE,
                    "10000,30000");
            DefParam.set(CameraParameters::KEY_SUPPORTED_PREVIEW_FPS_RANGE,
                    "(10000,30000)");
            DefParam.set(CameraParameters::KEY_EXPOSURE_COMPENSATION,
                    "2");
            DefParam.set(CameraParameters::KEY_MAX_EXPOSURE_COMPENSATION,
                    "5");
            DefParam.set(CameraParameters::KEY_MIN_EXPOSURE_COMPENSATION,
                    "0");
            DefParam.set(CameraParameters::KEY_EXPOSURE_COMPENSATION_STEP,
                    "1");
            DefParam.set(CameraParameters::KEY_ZOOM,
                    "0");
            DefParam.set(CameraParameters::KEY_MAX_ZOOM,
                    "0");
            DefParam.set(CameraParameters::KEY_ZOOM_RATIOS,
                    "100");
            DefParam.set(CameraParameters::KEY_ZOOM_SUPPORTED,
                    "false");
            DefParam.set(CameraParameters::KEY_SMOOTH_ZOOM_SUPPORTED,
                    "false");
        }

        Param[0]=Param[1]=DefParam;

        //change special setting for different platform
        Param[0].set(CameraParameters::KEY_PREVIEW_SIZE,"640x480");
        Param[1].set(CameraParameters::KEY_PREVIEW_SIZE,"720x480");
#if defined( DKB )
        Param[0].setPreviewFormat("yuv420p");
        Param[1].setPreviewFormat("yuv420p");
        Param[0].set(CameraParameters::KEY_VIDEO_FRAME_FORMAT,"yuv420p");
        Param[1].set(CameraParameters::KEY_VIDEO_FRAME_FORMAT,"yuv420p");
#elif defined ( SAARBMG1 )
        Param[0].setPreviewFormat("yuv422i-uyvy");
        Param[1].setPreviewFormat("yuv422i-uyvy");
        Param[0].set(CameraParameters::KEY_VIDEO_FRAME_FORMAT,"yuv422i-uyvy");
        Param[1].set(CameraParameters::KEY_VIDEO_FRAME_FORMAT,"yuv422i-uyvy");
#elif defined ( BROWNSTONE )
        Param[0].setPreviewFormat("yuv422i-uyvy");
        Param[1].setPreviewFormat("yuv422i-uyvy");
        Param[0].set(CameraParameters::KEY_VIDEO_FRAME_FORMAT,"yuv422i-uyvy");
        Param[1].set(CameraParameters::KEY_VIDEO_FRAME_FORMAT,"yuv422i-uyvy");
#elif defined ( ABILENE )
        Param[0].setPreviewFormat("yuv422i-uyvy");
        Param[1].setPreviewFormat("yuv422i-uyvy");
        Param[0].set(CameraParameters::KEY_VIDEO_FRAME_FORMAT,"yuv422i-uyvy");
        Param[1].set(CameraParameters::KEY_VIDEO_FRAME_FORMAT,"yuv422i-uyvy");
#endif
        return sizeof(sCameraInfo) / sizeof(sCameraInfo[0]);
    }

    void FakeCam::getCameraInfo(int cameraId, struct CameraInfo* cameraInfo)
    {
        memcpy(cameraInfo, &sCameraInfo[cameraId], sizeof(CameraInfo));
    }

    FakeCam::FakeCam(int cameraID):
        mCameraId(cameraID),
        kPreviewBufCnt(6),
        kStillBufCnt(2),
        kVideoBufCnt(6)
    {
        mSetting = Param[mCameraId];
    }

    FakeCam::~FakeCam(){
    }

    void FakeCam::enableMsgType(int32_t msgType){
        mMsgEnabled |= msgType;
    }

    void FakeCam::disableMsgType(int32_t msgType){
        mMsgEnabled &= ~msgType;
    }

    void FakeCam::setCallbacks(notify_callback notify_cb,void* user){
        mNotifyCb = notify_cb;
        mCallbackCookie = user;
    }

    status_t FakeCam::startPreview(){
        mPreviewTimeStamp = (int)(systemTime()/1000.0f);//us
        mPreviewFrameRate = mSetting.getPreviewFrameRate();
        mPreviewStdDelay = (int)(1000000.0f / float(mPreviewFrameRate));//us
        return NO_ERROR;
    }

    status_t FakeCam::stopPreview(){
        return NO_ERROR;
    }

    status_t FakeCam::startCapture(){
        return NO_ERROR;
    }

    status_t FakeCam::stopCapture(){
        return NO_ERROR;
    }

    status_t FakeCam::startVideo(){
        return NO_ERROR;
    }

    status_t FakeCam::stopVideo(){
        return NO_ERROR;
    }

    status_t FakeCam::setParameters(CameraParameters param){
        mSetting = param;
        return NO_ERROR;
    }

    CameraParameters FakeCam::getParameters(){
        return mSetting;
    }

    status_t FakeCam::registerPreviewBuffers(sp<ImageBuf> imagebuf){
        mPreviewImgBuf = imagebuf;
        return NO_ERROR;
    }

    status_t FakeCam::unregisterPreviewBuffers(){
        mPreviewImgBuf.clear();
        return NO_ERROR;
    }

    status_t FakeCam::enqPreviewBuffer(int index){
        return NO_ERROR;
    }

    status_t FakeCam::deqPreviewBuffer(int* index){
        int timestamp = (int)(systemTime()/1000.0f);//us
        mPreviewRealDelay = timestamp - mPreviewTimeStamp;//us
        mPreviewTimeStamp = timestamp;//us
        if(mPreviewStdDelay > mPreviewRealDelay){
            int delay = mPreviewStdDelay - mPreviewRealDelay;//us
            TRACE_V("%s:preview delay %d",__FUNCTION__,delay);
            usleep(delay);
        }

        int bufcnt=mPreviewImgBuf->getBufCnt();
        for(int i=0; i<bufcnt; i++){
            int preview,still,video,driver;
            mPreviewImgBuf->getStatus(i,&preview,&still,&video,&driver);
            if(0<driver){
                fillpreviewbuffer(mPreviewImgBuf, i);
                *index = i;
                return NO_ERROR;
            }
        }
        TRACE_E("no preview buffer available from sensor.");
        return UNKNOWN_ERROR;
    }

    status_t FakeCam::registerStillBuffers(sp<ImageBuf> imagebuf){
        mStillImgBuf = imagebuf;
        return NO_ERROR;
    }

    status_t FakeCam::unregisterStillBuffers(){
        mStillImgBuf.clear();
        return NO_ERROR;
    }

    status_t FakeCam::enqStillBuffer(int index){
        return NO_ERROR;
    }

    status_t FakeCam::deqStillBuffer(int* index){
        int bufcnt=mStillImgBuf->getBufCnt();
        for(int i=0; i<bufcnt; i++){
            int preview,still,video,driver;
            mStillImgBuf->getStatus(i,&preview,&still,&video,&driver);
            if(0<driver){
                fillstillbuffer(mStillImgBuf, i);
                *index = i;
                return NO_ERROR;
            }
        }
        TRACE_E("no still buffer available from sensor.");
        return UNKNOWN_ERROR;
    }


    ImageBuf::EngBufReq FakeCam::getPreviewBufReq(){
        const char* format = mSetting.getPreviewFormat();
        int w,h;
        mSetting.getPreviewSize(&w, &h);
        ImageBuf::EngBufReq bufreq = ImageBuf::getBufReq(format, Size(w,h), kPreviewBufCnt);
        return bufreq;
    }

    ImageBuf::EngBufReq FakeCam::getStillBufReq(){
        const char* format = mSetting.getPictureFormat();
        int w,h;
        mSetting.getPictureSize(&w, &h);
        ImageBuf::EngBufReq bufreq = ImageBuf::getBufReq(format, Size(w,h), kStillBufCnt);
        return bufreq;
    }

    sp<IMemory> FakeCam::getExifImage(int index)
    {
        return NULL;
    }

    status_t FakeCam::autoFocus()
    {
        mNotifyCb(CAMERA_MSG_FOCUS, true, 0, mCallbackCookie);
        return NO_ERROR;
    }

    status_t FakeCam::cancelAutoFocus()
    {
        return NO_ERROR;
    }

    status_t FakeCam::getBufCnt(int* previewbufcnt,int* stillbufcnt,int* videobufcnt)const
    {
        *previewbufcnt = kPreviewBufCnt;
        *stillbufcnt = kStillBufCnt;
        *videobufcnt = kVideoBufCnt;
        return NO_ERROR;
    }

    //-------------------------------------------------
    void FakeCam::fillpreviewbuffer(sp<ImageBuf> imagebuf, int i){
        static char timer=0;
        timer++;
        unsigned char* buf[3];
        imagebuf->getVirAddr(i,buf+0,buf+1,buf+2);
        int len[3];
        imagebuf->getAllocLen(i,len+0,len+1,len+2);
        memset(buf[0],timer,len[0]);
        memset(buf[1],timer,len[1]);
        memset(buf[2],timer,len[2]);
    }

    static unsigned char internaljpeg[]=
    {0xff,0xd8,0xff,0xe0,0x00,0x10,0x4a,0x46,0x49,0x46,0x00,0x01,0x01,0x00,0x00,0x01,
	0x00,0x01,0x00,0x00,0xff,0xfe,0x00,0x3b,0x43,0x52,0x45,0x41,0x54,0x4f,0x52,0x3a,
	0x20,0x67,0x64,0x2d,0x6a,0x70,0x65,0x67,0x20,0x76,0x31,0x2e,0x30,0x20,0x28,0x75,
	0x73,0x69,0x6e,0x67,0x20,0x49,0x4a,0x47,0x20,0x4a,0x50,0x45,0x47,0x20,0x76,0x36,
	0x32,0x29,0x2c,0x20,0x71,0x75,0x61,0x6c,0x69,0x74,0x79,0x20,0x3d,0x20,0x37,0x35,
	0x0a,0xff,0xdb,0x00,0x43,0x00,0x08,0x06,0x06,0x07,0x06,0x05,0x08,0x07,0x07,0x07,
	0x09,0x09,0x08,0x0a,0x0c,0x14,0x0d,0x0c,0x0b,0x0b,0x0c,0x19,0x12,0x13,0x0f,0x14,
	0x1d,0x1a,0x1f,0x1e,0x1d,0x1a,0x1c,0x1c,0x20,0x24,0x2e,0x27,0x20,0x22,0x2c,0x23,
	0x1c,0x1c,0x28,0x37,0x29,0x2c,0x30,0x31,0x34,0x34,0x34,0x1f,0x27,0x39,0x3d,0x38,
	0x32,0x3c,0x2e,0x33,0x34,0x32,0xff,0xdb,0x00,0x43,0x01,0x09,0x09,0x09,0x0c,0x0b,
	0x0c,0x18,0x0d,0x0d,0x18,0x32,0x21,0x1c,0x21,0x32,0x32,0x32,0x32,0x32,0x32,0x32,
	0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,
	0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,
	0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0xff,0xc0,0x00,0x11,0x08,
	0x00,0x37,0x00,0x69,0x03,0x01,0x22,0x00,0x02,0x11,0x01,0x03,0x11,0x01,0xff,0xc4,
	0x00,0x1f,0x00,0x00,0x01,0x05,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0xff,
	0xc4,0x00,0xb5,0x10,0x00,0x02,0x01,0x03,0x03,0x02,0x04,0x03,0x05,0x05,0x04,0x04,
	0x00,0x00,0x01,0x7d,0x01,0x02,0x03,0x00,0x04,0x11,0x05,0x12,0x21,0x31,0x41,0x06,
	0x13,0x51,0x61,0x07,0x22,0x71,0x14,0x32,0x81,0x91,0xa1,0x08,0x23,0x42,0xb1,0xc1,
	0x15,0x52,0xd1,0xf0,0x24,0x33,0x62,0x72,0x82,0x09,0x0a,0x16,0x17,0x18,0x19,0x1a,
	0x25,0x26,0x27,0x28,0x29,0x2a,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x43,0x44,0x45,
	0x46,0x47,0x48,0x49,0x4a,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x63,0x64,0x65,
	0x66,0x67,0x68,0x69,0x6a,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x83,0x84,0x85,
	0x86,0x87,0x88,0x89,0x8a,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0xa2,0xa3,
	0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,
	0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,
	0xd9,0xda,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xf1,0xf2,0xf3,0xf4,
	0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xff,0xc4,0x00,0x1f,0x01,0x00,0x03,0x01,0x01,0x01,
	0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x03,0x04,
	0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0xff,0xc4,0x00,0xb5,0x11,0x00,0x02,0x01,0x02,
	0x04,0x04,0x03,0x04,0x07,0x05,0x04,0x04,0x00,0x01,0x02,0x77,0x00,0x01,0x02,0x03,
	0x11,0x04,0x05,0x21,0x31,0x06,0x12,0x41,0x51,0x07,0x61,0x71,0x13,0x22,0x32,0x81,
	0x08,0x14,0x42,0x91,0xa1,0xb1,0xc1,0x09,0x23,0x33,0x52,0xf0,0x15,0x62,0x72,0xd1,
	0x0a,0x16,0x24,0x34,0xe1,0x25,0xf1,0x17,0x18,0x19,0x1a,0x26,0x27,0x28,0x29,0x2a,
	0x35,0x36,0x37,0x38,0x39,0x3a,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x53,0x54,
	0x55,0x56,0x57,0x58,0x59,0x5a,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x73,0x74,
	0x75,0x76,0x77,0x78,0x79,0x7a,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x92,
	0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,
	0xaa,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,
	0xc8,0xc9,0xca,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xe2,0xe3,0xe4,0xe5,
	0xe6,0xe7,0xe8,0xe9,0xea,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xff,0xda,
	0x00,0x0c,0x03,0x01,0x00,0x02,0x11,0x03,0x11,0x00,0x3f,0x00,0xf7,0xfa,0x28,0xa2,
	0x80,0x0a,0x28,0xaf,0x03,0xf8,0xc3,0xf1,0x87,0xca,0xfb,0x47,0x86,0x7c,0x33,0x73,
	0xfb,0xce,0x63,0xbd,0xbe,0x8d,0xbe,0xef,0xac,0x68,0x7d,0x7d,0x5b,0xb7,0x41,0xcf,
	0x40,0x0d,0x1f,0x88,0x5f,0x18,0xde,0xdf,0xc4,0x56,0xbe,0x1a,0xf0,0xad,0xd2,0xac,
	0xdf,0x69,0x48,0xaf,0x2f,0xd1,0x55,0xc2,0x65,0x80,0x28,0x81,0x81,0x52,0x7d,0x49,
	0x04,0x0e,0x9f,0x4f,0x4b,0xff,0x00,0x84,0x7b,0x54,0xff,0x00,0xa1,0xcf,0x5c,0xff,
	0x00,0xbf,0x36,0x5f,0xfc,0x8f,0x5f,0x18,0x68,0x5f,0xf2,0x30,0xe9,0x9f,0xf5,0xf7,
	0x17,0xfe,0x86,0x2b,0xee,0xfa,0x00,0xe7,0xff,0x00,0xe1,0x1e,0xd5,0x3f,0xe8,0x73,
	0xd7,0x3f,0xef,0xcd,0x97,0xff,0x00,0x23,0xd4,0x3e,0x16,0xb9,0xbf,0x3a,0xaf,0x88,
	0xb4,0xeb,0xed,0x4a,0x7b,0xf5,0xb0,0xbc,0x8e,0x28,0x65,0x9d,0x22,0x57,0xda,0xd6,
	0xf1,0x48,0x41,0xf2,0xd1,0x41,0xf9,0x9c,0xf6,0xae,0x9a,0xb8,0xcd,0x3b,0x54,0xb2,
	0xd1,0xb5,0xaf,0x1d,0x6a,0x3a,0x8d,0xca,0x5b,0xda,0x5b,0xdf,0x40,0xf2,0x4a,0xe7,
	0x80,0x3e,0xc9,0x07,0xe6,0x7b,0x01,0xd4,0x9a,0x00,0xea,0x35,0x4d,0x52,0xcb,0x46,
	0xd3,0x67,0xd4,0x75,0x1b,0x94,0xb7,0xb4,0xb7,0x5d,0xf2,0x4a,0xe7,0x80,0x3f,0xa9,
	0xec,0x07,0x52,0x6b,0xc9,0xbc,0x1d,0xf1,0x07,0x54,0xf8,0x97,0xe3,0xbd,0x4e,0xd2,
	0xcb,0x52,0xbb,0xd1,0xf4,0x7b,0x5b,0x5f,0x32,0xdd,0x2d,0xe2,0x81,0xa5,0x90,0x87,
	0x03,0x73,0x99,0x23,0x7e,0xa0,0xf4,0x18,0xc7,0x1d,0x7a,0x9f,0x23,0xf8,0x9b,0xf1,
	0x36,0xf7,0xc7,0x9a,0x97,0x93,0x0e,0xfb,0x7d,0x16,0xdd,0xb3,0x6f,0x6c,0x4f,0x2e,
	0x7f,0xbe,0xfe,0xad,0xe8,0x3a,0x01,0xf8,0x93,0xd4,0x7e,0xcd,0xdf,0xf2,0x39,0x6a,
	0xdf,0xf6,0x0f,0xff,0x00,0xda,0x89,0x40,0x1e,0xf1,0xff,0x00,0x08,0xf6,0xa9,0xff,
	0x00,0x43,0x9e,0xb9,0xff,0x00,0x7e,0x6c,0xbf,0xf9,0x1e,0xaa,0xea,0x7a,0x3e,0xaf,
	0x67,0xa5,0x5e,0x5d,0x47,0xe3,0x1d,0x6c,0xbc,0x30,0x3c,0x8a,0x1a,0x1b,0x2c,0x12,
	0x14,0x91,0x9f,0xf4,0x7f,0x6a,0xea,0xab,0x3f,0x5e,0xff,0x00,0x91,0x7b,0x53,0xff,
	0x00,0xaf,0x49,0x7f,0xf4,0x03,0x40,0x1c,0x8d,0xf6,0xa7,0xe2,0xd9,0x2f,0x74,0x73,
	0xa7,0xa4,0x8f,0x69,0x36,0x9e,0x92,0xbc,0x8b,0x08,0x60,0xf3,0x9e,0xc4,0xe3,0x0b,
	0xd4,0x64,0x1d,0xa3,0x04,0x90,0x72,0x38,0xef,0xab,0x3f,0x41,0xff,0x00,0x91,0x7b,
	0x4c,0xff,0x00,0xaf,0x48,0xbf,0xf4,0x01,0x5a,0x14,0x00,0x51,0x45,0x78,0x1f,0xc6,
	0x1f,0x8c,0x3e,0x57,0xda,0x3c,0x33,0xe1,0x9b,0x9f,0xde,0x73,0x1d,0xed,0xf4,0x6d,
	0xf7,0x7d,0x63,0x43,0xeb,0xea,0xdd,0xba,0x0e,0x7a,0x00,0x1f,0x18,0x7e,0x30,0xf9,
	0x5f,0x68,0xf0,0xcf,0x86,0x6e,0x7f,0x79,0xcc,0x77,0xb7,0xd1,0xb7,0xdd,0xf5,0x8d,
	0x0f,0xaf,0xab,0x76,0xe8,0x39,0xe9,0xf3,0xe5,0x15,0xa1,0xa1,0xe8,0x7a,0x8f,0x88,
	0xf5,0x7b,0x7d,0x2f,0x4b,0xb6,0x6b,0x8b,0xb9,0xdb,0x0a,0xa3,0xa0,0x1d,0xc9,0x3d,
	0x80,0xee,0x68,0x02,0x4f,0x0e,0x5b,0x5c,0xdd,0x78,0x86,0xc4,0x5a,0xdb,0x4d,0x70,
	0xf1,0xcc,0x92,0xb2,0x42,0x85,0x9b,0x6a,0x90,0x49,0xc0,0xf6,0x15,0xf5,0xdf,0xfc,
	0x2c,0x5d,0x3b,0xfe,0x81,0x3a,0xe7,0xfe,0x00,0x37,0xf8,0xd7,0x26,0x3e,0x1b,0xe8,
	0xbe,0x05,0xf8,0x5b,0xa9,0x41,0x71,0xba,0xe2,0xf2,0xe1,0x61,0xfb,0x65,0xd4,0x70,
	0xac,0x8c,0xe7,0xcd,0x4c,0x22,0xab,0xb2,0x8d,0x99,0xc0,0xc1,0x23,0x3d,0x4f,0xa5,
	0x53,0xfe,0xc3,0x3f,0xf4,0x27,0x69,0x5f,0xf8,0x24,0xd3,0x3f,0xf9,0x32,0x80,0x3b,
	0x2b,0xbf,0x8a,0x3a,0x35,0x85,0xac,0x97,0x57,0x7a,0x7e,0xb3,0x04,0x11,0x8c,0xbc,
	0x92,0x59,0x30,0x55,0x1e,0xe7,0x35,0xf3,0x6f,0xc4,0xbf,0x19,0x8f,0x14,0x78,0xab,
	0x54,0x93,0x4c,0xba,0x9c,0xe8,0xb7,0x33,0xc5,0x70,0x90,0xba,0xec,0xdd,0x22,0xc1,
	0x1c,0x65,0x88,0xf5,0x1b,0x08,0x19,0xfe,0xb5,0xdf,0xdd,0xe9,0x7e,0x33,0x17,0x72,
	0x8b,0x3f,0x87,0x9e,0x0c,0x7b,0x60,0xc7,0xcb,0x69,0xad,0x6c,0x55,0xca,0xf6,0x24,
	0x09,0x88,0x07,0xd8,0x13,0xf5,0xaf,0x25,0xf1,0x84,0x57,0xf0,0xf8,0xa6,0xf6,0x3d,
	0x4f,0x4e,0xb1,0xd3,0xaf,0x06,0xcf,0x32,0xd6,0xc1,0x51,0x61,0x8f,0xe4,0x5c,0x6d,
	0x08,0x4a,0xf2,0x30,0x4e,0x0f,0x52,0x7b,0xd0,0x06,0x1d,0x7a,0xe7,0xc0,0xab,0xe9,
	0x34,0x0d,0x67,0x50,0xd5,0xae,0x74,0xed,0x42,0x6b,0x29,0xad,0x8d,0xba,0x4b,0x6d,
	0x6e,0x64,0x1b,0xf7,0x2b,0x11,0xf9,0x7f,0x4a,0xc2,0xf8,0x65,0xf0,0xca,0xf7,0xc7,
	0x9a,0x97,0x9d,0x36,0xfb,0x7d,0x16,0xdd,0xf1,0x71,0x72,0x07,0x2e,0x7f,0xb8,0x9e,
	0xad,0xea,0x7a,0x01,0xf8,0x03,0xee,0x1e,0x2d,0xf0,0xfe,0x97,0x65,0xa8,0xe8,0x9a,
	0x66,0x9f,0xa2,0xdb,0xce,0x96,0xd6,0x33,0x2c,0x36,0x92,0x58,0xdb,0x4f,0x12,0x47,
	0xbe,0x3c,0xb7,0xef,0xe6,0x8f,0x0d,0x9c,0x72,0x32,0x4e,0x4e,0x68,0x03,0xa0,0xff,
	0x00,0x85,0x8b,0xa7,0x7f,0xd0,0x27,0x5c,0xff,0x00,0xc0,0x06,0xff,0x00,0x1a,0xa9,
	0xaa,0x78,0xf6,0xca,0xef,0x48,0xbd,0xb6,0x8b,0x48,0xd6,0xcc,0x93,0x40,0xf1,0xae,
	0x6c,0x58,0x0c,0x95,0x20,0x57,0x25,0xfd,0x86,0x7f,0xe8,0x4e,0xd2,0xbf,0xf0,0x49,
	0xa6,0x7f,0xf2,0x65,0x41,0x7b,0xa2,0x22,0xd8,0x5c,0x19,0x7c,0x27,0xa6,0xc5,0x18,
	0x89,0x8b,0xc9,0x1e,0x8b,0xa6,0x6e,0x51,0x83,0x92,0x31,0x79,0x9c,0x8f,0x6a,0x00,
	0xf6,0x1d,0x16,0x37,0x8b,0x42,0xd3,0xe3,0x91,0x4a,0xba,0x5b,0x46,0xac,0xa7,0xa8,
	0x21,0x45,0x5e,0xaa,0x5a,0x30,0x8c,0x68,0x7a,0x78,0x88,0xb1,0x8f,0xec,0xd1,0xec,
	0x2e,0x30,0x48,0xda,0x31,0x91,0xd8,0xd5,0xda,0x00,0xf1,0xaf,0x8b,0xde,0x37,0xf1,
	0x10,0x49,0xbc,0x39,0xe1,0x6d,0x27,0x54,0x62,0xc3,0x6d,0xdd,0xfc,0x36,0xb2,0x10,
	0x07,0x74,0x8d,0x80,0xeb,0xea,0xc3,0xe8,0x3d,0xbe,0x7d,0xff,0x00,0x84,0x4f,0xc4,
	0x9f,0xf4,0x2f,0xea,0xbf,0xf8,0x05,0x27,0xf8,0x57,0xdb,0xc3,0x51,0xb1,0x64,0xb8,
	0x61,0x79,0x6e,0x56,0xdc,0x91,0x39,0x12,0xae,0x22,0x23,0xa8,0x6e,0x78,0xfc,0x6a,
	0x68,0xa5,0x8e,0x78,0x92,0x58,0x64,0x49,0x23,0x71,0xb9,0x5d,0x18,0x10,0xc3,0xd4,
	0x11,0xd6,0x92,0x69,0xec,0x53,0x84,0x96,0xe8,0xf8,0x93,0x4f,0xf0,0x2f,0x8a,0x75,
	0x2d,0x42,0x0b,0x28,0x34,0x0d,0x45,0x65,0x99,0xc2,0x2b,0x4b,0x6c,0xe8,0x83,0xdc,
	0xb1,0x18,0x03,0xdc,0xd7,0xd5,0x5f,0x0e,0xbe,0x1d,0x69,0xde,0x01,0xd2,0x3c,0xb8,
	0xf6,0xdc,0x6a,0x73,0xa8,0xfb,0x55,0xde,0x39,0x63,0xfd,0xd5,0xf4,0x51,0xfa,0xf5,
	0x3e,0xdd,0x84,0xb7,0x10,0xc0,0x63,0x13,0x4d,0x1c,0x66,0x47,0x08,0x9b,0xd8,0x0d,
	0xcc,0x7a,0x01,0x9e,0xa7,0xda,0xa4,0xa7,0x71,0x59,0xee,0x73,0x7e,0x3f,0x8a,0xe6,
	0x6f,0x03,0x6a,0x89,0x67,0x6e,0x2e,0x26,0xd8,0xad,0xe5,0x18,0x63,0x9b,0x72,0x87,
	0x52,0xd8,0x49,0x01,0x56,0x3b,0x41,0xc0,0x23,0xae,0x3b,0xd7,0x82,0x6a,0x7a,0x4f,
	0x86,0xb5,0x61,0x18,0xb9,0xd0,0x7c,0x70,0x9e,0x5e,0x76,0xfd,0x97,0xc3,0xb6,0x76,
	0xd9,0xcf,0xaf,0x94,0xab,0x9e,0x9d,0xf3,0x5f,0x49,0xcb,0xaa,0xe9,0xd0,0x5d,0x0b,
	0x59,0xb5,0x0b,0x58,0xee,0x0e,0x07,0x94,0xf3,0x28,0x7e,0x7a,0x70,0x4e,0x6a,0xe5,
	0x24,0xd3,0xd8,0x6e,0x12,0x8d,0x9b,0x5b,0x9f,0x28,0x7f,0xc2,0x21,0xe0,0xff,0x00,
	0xfa,0x03,0x7c,0x47,0xff,0x00,0xc1,0x64,0x3f,0xe3,0x4e,0xf0,0xc7,0xc2,0x59,0xbc,
	0x53,0xe3,0x29,0x22,0xb6,0xb3,0xd6,0x2c,0x3c,0x37,0x01,0x46,0x79,0xf5,0x48,0x04,
	0x53,0xb0,0xc0,0xca,0x80,0x38,0x2c,0x4e,0xec,0x11,0x90,0x06,0x09,0xe7,0x83,0xf5,
	0x29,0xbf,0xb3,0x10,0xcd,0x31,0xbb,0x80,0x45,0x03,0x14,0x95,0xcc,0x83,0x11,0xb0,
	0xea,0x18,0xe7,0x83,0xc8,0xe0,0xd5,0x8a,0x13,0x4f,0x61,0x38,0xb5,0xba,0x2a,0x69,
	0x9a,0x65,0x96,0x8d,0xa6,0xc1,0xa7,0x69,0xd6,0xc9,0x6f,0x69,0x6e,0x9b,0x23,0x89,
	0x07,0x00,0x7f,0x53,0xdc,0x9e,0xa4,0xd7,0x19,0xe3,0xff,0x00,0x0f,0xde,0x6b,0x7a,
	0xae,0x9c,0xc9,0xa5,0xcb,0x79,0x67,0x14,0x12,0x87,0x68,0x2d,0x2c,0x27,0x75,0x90,
	0xb2,0x6d,0x1f,0xe9,0x7d,0x06,0x03,0x7d,0xde,0xe0,0x66,0xbb,0x28,0xb5,0x7d,0x36,
	0x7b,0xbf,0xb2,0x45,0xa8,0xda,0x49,0x73,0x92,0xbe,0x4a,0x4c,0xa5,0xf2,0x3a,0x8c,
	0x67,0x3c,0x60,0xfe,0x55,0x66,0x59,0x63,0x82,0x27,0x96,0x69,0x12,0x38,0xd0,0x6e,
	0x67,0x76,0x00,0x28,0xf5,0x24,0xf4,0xa1,0x49,0x35,0x74,0xc6,0xe1,0x28,0xbb,0x35,
	0xa9,0xe3,0x7f,0xf0,0x80,0xc9,0xff,0x00,0x42,0xde,0xab,0xff,0x00,0x82,0x8d,0x02,
	0xa3,0x9b,0xc0,0x37,0x3e,0x44,0x9e,0x47,0x86,0xf5,0x2f,0x3b,0x69,0xf2,0xfc,0xcd,
	0x27,0x41,0xdb,0xbb,0x1c,0x67,0x1c,0xe3,0x35,0xed,0x40,0x82,0x01,0x04,0x10,0x7a,
	0x11,0x4c,0x69,0xe2,0x49,0x92,0x16,0x95,0x16,0x59,0x01,0x28,0x85,0x80,0x66,0x03,
	0xae,0x07,0x7c,0x64,0x7e,0x74,0xee,0x24,0x9b,0x21,0xd3,0x63,0x96,0x2d,0x2a,0xce,
	0x3b,0x84,0x54,0x99,0x20,0x45,0x91,0x54,0x00,0x03,0x05,0x19,0x00,0x0e,0x3a,0xfa,
	0x71,0x56,0xaa,0xa5,0xc6,0xa7,0x65,0x6b,0x75,0x1d,0xb4,0xd7,0x0a,0x93,0xb8,0xca,
	0xa7,0x24,0xe3,0x9e,0x4f,0xa0,0xe1,0xb9,0x3e,0x87,0xd0,0xd5,0xba,0x49,0xa7,0xb0,
	0xdc,0x65,0x14,0x9b,0x5b,0x9e,0x76,0x3c,0x3b,0xa9,0x3e,0xa5,0x7a,0xab,0x10,0x5b,
	0x5d,0x42,0xfa,0x6f,0xb5,0x7c,0xe3,0x98,0xd1,0xfc,0xc4,0xef,0xfc,0x5f,0x32,0xfe,
	0x3c,0xd7,0x63,0xe1,0xdb,0x79,0x6d,0x7c,0x39,0xa7,0x41,0x32,0xed,0x96,0x3b,0x74,
	0x56,0x5c,0x83,0x82,0x07,0xb5,0x14,0x57,0x35,0x1a,0x11,0xa7,0x2b,0xa3,0xbf,0x17,
	0x8c,0xa9,0x5a,0x0a,0x12,0xb7,0x4f,0xd5,0x7e,0x56,0x5f,0x24,0x61,0x78,0x9b,0x4b,
	0xd5,0x75,0xcd,0x4d,0x92,0xd1,0x62,0x48,0xac,0xa1,0x0d,0x13,0xc8,0xf8,0x26,0x66,
	0x39,0xdc,0xb8,0xcf,0x20,0x28,0x1c,0xe3,0xa9,0xae,0x9f,0x4f,0x9e,0x5b,0x9d,0x3e,
	0xde,0x69,0xe2,0xf2,0xa6,0x78,0xc1,0x92,0x3c,0x83,0xb5,0xbb,0x8c,0x8f,0x7a,0x28,
	0xab,0x85,0x35,0x19,0xb9,0x5f,0x73,0x2a,0xd5,0x9c,0xe8,0xc6,0x9b,0x4a,0xd1,0xb5,
	0xbe,0x6b,0x5f,0xbd,0x9c,0x5e,0xbd,0xa1,0x5f,0xde,0xeb,0x5a,0xac,0xe1,0x58,0xd9,
	0x48,0xf6,0xa2,0x58,0x97,0x66,0xe9,0x90,0x67,0x76,0xd6,0x3c,0xa9,0x5e,0x3d,0x33,
	0xcd,0x77,0xa3,0x91,0x9a,0x28,0xa2,0x95,0x35,0x09,0x49,0xae,0xbf,0xe6,0xc3,0x13,
	0x88,0x95,0x5a,0x70,0x8c,0xbe,0xce,0x9f,0x84,0x57,0xe9,0xfd,0x68,0x72,0x57,0xfa,
	0x15,0xd4,0xde,0x29,0x09,0x18,0x5f,0xec,0xab,0xc7,0x8e,0xe6,0xe8,0x64,0x7d,0xf8,
	0xb3,0x81,0x8f,0x46,0x3b,0x33,0xf4,0xae,0xb6,0x8a,0x2a,0xa9,0xd3,0x50,0x6d,0xae,
	0xac,0xce,0xbd,0x79,0xd5,0x8c,0x14,0xba,0x2f,0xeb,0xe7,0x64,0x97,0xc8,0xe1,0xfc,
	0x39,0x63,0x77,0x67,0xe2,0x19,0x7c,0xf8,0x2e,0x55,0x5e,0xe6,0x77,0x07,0xf7,0x26,
	0x3c,0x1d,0xc4,0x1c,0xfd,0xfa,0xe9,0x7c,0x45,0x6f,0x2d,0xd7,0x87,0x35,0x18,0x21,
	0x5d,0xd2,0xc9,0x6e,0xea,0xab,0x90,0x32,0x48,0xf7,0xa2,0x8a,0xce,0x95,0x34,0xa9,
	0xb8,0xfa,0x9d,0x38,0x9c,0x44,0xa7,0x88,0x85,0x56,0x95,0xd5,0xbf,0x31,0xfa,0x3d,
	0xe4,0x97,0x96,0x79,0x96,0xd2,0x5b,0x66,0x8f,0x09,0xb6,0x46,0x56,0xcf,0x03,0x9f,
	0x94,0x9a,0xce,0xd7,0x9e,0xe2,0xd7,0x5c,0xd2,0x6f,0xa1,0xb3,0x92,0xe6,0x38,0x63,
	0x9d,0x5d,0x63,0x75,0x52,0x37,0x6c,0xc7,0xde,0x23,0xd0,0xd1,0x45,0x54,0x93,0x74,
	0xb7,0xed,0xf9,0x99,0xd3,0x92,0x8e,0x25,0xb4,0xb4,0xd5,0x5b,0x5e,0xa9,0xae,0xf7,
	0xfc,0x4b,0x97,0x7a,0x2d,0xb6,0xa7,0x71,0x15,0xe4,0xa6,0x68,0xa5,0xf2,0xf6,0x10,
	0xa4,0x7d,0xd3,0xc9,0x1d,0x0f,0x3d,0xb2,0x3b,0x7e,0x75,0xab,0x45,0x15,0xac,0x62,
	0x96,0xab,0xa9,0xcd,0x3a,0x92,0x92,0x51,0x6f,0x45,0xb1,0xff,0xd9};

    /*
     * Look for /data/image.jpg file.
     * if exist, use it,
     * or else, use internal "MARVELL" logo data.
     */
    void FakeCam::fillstillbuffer(sp<ImageBuf> imagebuf, int i){
        unsigned char* buf[3];
        imagebuf->getVirAddr(i,buf+0,buf+1,buf+2);
        int len[3];
        imagebuf->getAllocLen(i,len+0,len+1,len+2);
        memset(buf[0],0,len[0]);
        memset(buf[1],0,len[1]);
        memset(buf[2],0,len[2]);

        //readin fake jpeg image
        char fname[]="/data/image.jpg";
        FILE *fptr = fopen(fname, "rb");
        size_t pic_len = 0;
        size_t buf_len = len[0]+len[1]+len[2];
        if (fptr == 0) {
            TRACE_D("%s: fail to open file %s", __FUNCTION__, fname);
            TRACE_D("%s: using internal jpeg data", __FUNCTION__);
            memcpy((void*)buf[0],(void*)internaljpeg, sizeof(internaljpeg));
        }
        else{
            TRACE_D("%s: use user specified file for jpeg callback, %s", __FUNCTION__, fname);
            pic_len = fread((void*)buf[0], 1, buf_len, fptr);
            fclose(fptr);
        }
    }

}; // namespace android
